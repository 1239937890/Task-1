package task.jnshu.controller;import org.apache.commons.codec.binary.Base64;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import task.jnshu.model.Profession;import task.jnshu.model.Student;import task.jnshu.service.ProfessionService;import task.jnshu.service.StudentService;import task.jnshu.utils.DesUtils;import task.jnshu.utils.Md5Utils;import javax.servlet.ServletException;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.io.OutputStream;import java.io.PrintWriter;import java.util.List;/** * 本类能在表格中输出全体学生信息 * 输出JSON的格式信息 * 访问技能书主页和职业界面 * Created by Administrator on 7/8/2017. */@Controllerpublic class StudentController {    @Autowired    private StudentService studyService;    @Autowired    ProfessionService professionService;    private static Logger loggerController = Logger.getLogger(StudentController.class);    String DES_KEY = "12345678";//    @RequestMapping(value="/a/student/select/{userId}",method = RequestMethod.GET)//    public String detail(HttpServletRequest request, HttpServletResponse response, Model model, @PathVariable int id) {//        if(id!= 0) {//            try {//                loggerController.info("查找当前的用户信息");//                loggerController.info("id " + id);//                Student study = this.studyService.studentSelect(id);//                loggerController.info("学生信息： "+ study);//                //将数据绑定到model上，可以传入jsp页面//                model.addAttribute("study", study);//            } catch (Exception e) {//                e.printStackTrace();//                loggerController.error("查询失败" + e.getMessage());//                return "common/errorJson";//            }//            return "student/studentDataliJson";//        }//        else {//            loggerController.info("id " + id);//            return "common/errorParameterJson";//        }//    }    //首页    @RequestMapping(value="/a/home",method = RequestMethod.GET)    public String detail(HttpServletRequest request, HttpServletResponse response, Model model) {        try{            //0为找到工作的状态 ：graduation            //-1是查询所有学员数量：entire            int graduation = studyService.selectStudentNumber(0);            int entire = studyService.selectStudentNumber(null);//            loggerController.info("entire: " + entire);//            loggerController.info("graduation: " + graduation);            List<Student> students = studyService.studentAll();            model.addAttribute("graduation",graduation);            model.addAttribute("entire",entire);            model.addAttribute("students",students);            //查看当前所有cookie            loggerController.info("所有Cookie\n");            Cookie[] cookies = request.getCookies();            loggerController.info("cookie数量: " + cookies.length);            for(int i = 0;i<cookies.length;i++){                loggerController.info("Cookie-name: " + cookies[i].getName() +                        "    Cookie-MaxAge: " + cookies[i].getMaxAge() +                        "    Cookie-Value: " + cookies[i].getValue()+ "\n");            }        }catch (Exception e){            e.printStackTrace();            loggerController.error("e.getMessage :  " + e.getMessage());            return "/common/errorJson";        }        return "task10/task10";    }    //测试自定义Tag时间格式转换页面    @RequestMapping(value="/a/tagTime",method = RequestMethod.GET)    public String tagTime(HttpServletRequest request, HttpServletResponse response, Model model)  throws ServletException, IOException{        return "tagTime";    }    public void testOne(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        //得到请求的URL地址        String requestUrl = request.getRequestURL().toString();        //得到请求的资源        String requestUri = request.getRequestURI();        //得到请求的URL地址中附带的参数        String queryString = request.getQueryString();        //的到来访者的ip地址        String remoteAddr = request.getRemoteAddr();        //返回发出请求的客户机的完整主机名。        String remoteHost = request.getRemoteHost();        //返回客户机所使用的网络端口号。        int remotePort = request.getRemotePort();        //返回用户名        String remoteUser = request.getRemoteUser();        //得到请求URL地址时使用的方法        String method = request.getMethod();        //返回请求URL中的额外路径信息。        // 额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以“/”开头。        String pathInfo = request.getPathInfo();        //获取web服务器的ip地址        String localAddr = request.getLocalAddr();        //获取web服务器的主机名        String localName = request.getLocalName();        //设置字符以UTF-8编码输出到客户浏览器        response.setCharacterEncoding("UTF-8");        ////通过设置响应头控制浏览器以UTF-8的编码显示数据，        // 如果不加这句话，那么浏览器显示的将是乱码        response.setHeader("content", "text/html;charset=UTF-8");        PrintWriter out = response.getWriter();        out.write("获取到的客户信息如下");        out.write("<hr/>");        out.write("请求的URL地址：" + requestUrl);        out.write("<br/>");        out.write("请求的资源：" + requestUri);        out.write("<br/>");        out.write("请求的URL地址中附带的参数：" + queryString);        out.write("<br/>");        out.write("来访者的IP地址：" + remoteAddr);        out.write("<br/>");        out.write("来访者的主机名：" + remoteHost);        out.write("<br/>");        out.write("使用的端口号：" + remotePort);        out.write("<br/>");        out.write("remoteUser：" + remoteUser);        out.write("<br/>");        out.write("请求使用的方法：" + method);        out.write("<br/>");        out.write("pathInfo：" + pathInfo);        out.write("<br/>");        out.write("localAddr：" + localAddr);        out.write("<br/>");        out.write("localName：" + localName);        //测试session        HttpSession session = request.getSession();        session.setAttribute("rcy","qwe1213");        String sessionId = session.getId();//        if(session.isNew()){//            out.write("session创建成功，session的id是："+sessionId);//        }//        else//            out.print("服务器已经存在该session了，session的id是："+sessionId);       // test(request, response);    }    @RequestMapping(value="/a/test",method = RequestMethod.GET)    public void test(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        testOne(request, response);    }    //查询所有学生信息JSON格式    @RequestMapping(value="/a/u/student/all",method = RequestMethod.GET)    public String studentAll(HttpServletRequest request, HttpServletResponse response, Model model) {        try{            List<Student> students = studyService.studentAll();//            loggerController.info("students: "+students);            model.addAttribute("students",students);        }catch (Exception e){            e.printStackTrace();            loggerController.error(e.getMessage());            return "/common/errorJson";        }        return "student/studyAll";    }    //职业介绍界面    @RequestMapping(value="/a/profession",method = RequestMethod.GET)    public String profession(HttpServletRequest request, HttpServletResponse response, Model model) {        try{            //把profession的socialNeed社会需求存入数组            List<Profession> professions = professionService.selectProfessionAll();            int a[] = new int[professions.size()];            for(int i = 0;i<professions.size();i++){                a[i] = professions.get(i).getLearningFront();            }            model.addAttribute("professions",professions);            model.addAttribute("a",a);        }catch (Exception e){            e.printStackTrace();            loggerController.error(e.getMessage());            return "/common/errorJson";        }        return "task11/task11";    }    //表格界面    @RequestMapping(value="/a/u/student/table",method = RequestMethod.GET)    public String studentTable(HttpServletRequest request, HttpServletResponse response, Model model) {        try{            List<Student> studentTable = studyService.studentAll();//            loggerController.error("studentTable: "+studentTable);            model.addAttribute("studentTable",studentTable);        }catch (Exception e){            e.printStackTrace();            loggerController.error(e.getMessage());            return "/common/errorJson";        }        return "student/studentTable";    }        @RequestMapping(value="/a/login", method = RequestMethod.GET)    public String login(HttpServletRequest request, HttpServletResponse response, Model model){        return "task5/login";    }        //登陆验证    @RequestMapping(value = "/a/login/validate",method = RequestMethod.POST)    public void validate(HttpServletRequest request, HttpServletResponse response, Model model)  throws ServletException, IOException    {        String user = request.getParameter("username");        String pass = request.getParameter("password");        loggerController.info("user-jsp: "+user +"\npass-jsp: "+ pass);        OutputStream out = response.getOutputStream();        //非法字符        try{            String errorMessage = request.getAttribute("errorMessage").toString();            if(errorMessage != null) {                String script = "<script charset=\"utf-8\" language='javaScript'> alert('" + errorMessage + "');</script>";                out.write(script.getBytes());                response.setHeader("refresh", "0;url=/a/login");                return;            }        }catch (Exception e){            e.printStackTrace();        }        if(user != "" && pass !="")        {            try{                int userBeing = studyService.selectUserNumber(user);                if(userBeing != 0){                    Student student = studyService.selectUser(user);//                    loggerController.info("student: "+ student);                    Md5Utils md5 = new Md5Utils();                    pass = md5.getMD5(pass);//                    loggerController.info("pass--MD5: "+ pass);                    if(pass.equals(student.getPass())){                        //生成session                        HttpSession session = request.getSession();                        session.setAttribute("user",user);                        session.setAttribute("user2",user);//                        loggerController.info("sessionId: " + session.getId());                        //对用户id和登陆时间进行DES加密                        DesUtils desUtils = new DesUtils();                        String id = student.getId().toString();                        byte[] str1 = desUtils.desCrypto(id.getBytes(),DES_KEY);                        String createDate = String.valueOf(System.currentTimeMillis());                        byte[] str2 = desUtils.desCrypto(createDate.getBytes(),DES_KEY);                        //对加密后的id和登陆时间字符进行Base64编码                        String results = Base64.encodeBase64String(str1) + ":" + Base64.encodeBase64String(str2);                        /*设置cookie,  Cookie 里面放的是 用户的id 和 创建时间*/                        Cookie cookieToken = new Cookie("token",results);                        cookieToken.setMaxAge(60*2);//2分钟有效时间                        cookieToken.setPath("/");                        response.addCookie(cookieToken);                        //查看当前所有cookie                        loggerController.info("所有Cookie\n");                        Cookie[] cookies = request.getCookies();                        loggerController.info("cookie数量: " + cookies.length);                        if(request.getSession().getAttribute("lastUrl") != null)                        {                            //获取名为lastUrl的session的value                            String lastUrl = (String)request.getSession().getAttribute("lastUrl");                            loggerController.info("lastUrl: " + lastUrl);                            session.removeAttribute("user");                            loggerController.info(request.getSession().getAttribute("lastUrl"));                            response.sendRedirect(lastUrl);                        }                        else                            response.sendRedirect(request.getContextPath()+"/a/home");                    }                    else{                        out.write("  <script charset=\"utf-8\" language=\"javaScript\"> alert('密码错误');</script>".getBytes());//                      response.sendRedirect("/a/login");                        response.setHeader("refresh", "0;url=/a/login");                    }                }                else{                    out.write(" <script charset=\"utf-8\" language='javaScript'> alert('用户名不存在');</script>".getBytes());                    response.setHeader("refresh", "0;url=/a/login");                }            }catch (Exception e){                e.printStackTrace();                loggerController.error("e.getMessage() " + e.getMessage());            }        }        else {            out.write(" <script charset=\"utf-8\" language='javaScript'> alert('用户名密码不能为空');</script>".getBytes());            response.setHeader("refresh", "0;url=/a/login");        }    }        //退出登陆    @RequestMapping(value = "/a/logout",method = RequestMethod.GET)    public void logout(HttpServletRequest request, HttpServletResponse response, Model model)  throws ServletException, IOException{        //查看当前所有cookie        Cookie[] cookies = request.getCookies();        loggerController.info("退出登录--cookie数量: " + cookies.length);        for(int i = 0;i<cookies.length;i++){            if("token".equals(cookies[i].getName())){                Cookie cookieToken = new Cookie(cookies[i].getName(),null);                 /*同样的cookie名字 可以代替 原来的那个，设置 有效时间为o 就可以注销 */                cookieToken.setMaxAge(0);                /**                 * 删除 Cookie 时，只设置 maxAge=0 将不能够从浏览器中删除 cookie,                 * 因为一个 Cookie 应当属于一个 path 与 domain(value)，所以删除时，Cookie 的这两个属性也必须设置。                 *                 * 误区: 刚开始时，我没有发现客户端发送到服务器端的 cookie 的 path 与 domain(value) 值为空这个问题。                 * 因为在登陆系统时，我设置了 Cookie 的 path 与 domain(value) 属性的值, 就误认为每次客户端请求时，都会把 Cookie 的                 * 这两个属性也提交到服务器端，但系统并没有把 path 与 domain(value) 提交到服务器端 (提交过来的只有 Cookie 的 key，value 值)。                 */                // 重点是这里 1, 必须设置 domain 属性的值//                cookieToken.setValue("");                // 重点是这里 2, 必须设置 path 属性的值                cookieToken.setPath("/");                response.addCookie(cookieToken);                break;            }        }        /*不仅cookie 要注销，用户也要注销*/        HttpSession session = request.getSession();//        //一、把user的value赋值为null//        session.setAttribute("user", null);////        //二、清空user的值        session.removeAttribute("user");        //三、注销名为user的session//        ((HttpSession) session.getSession()).invalidate();        /**         * 如果通过session来进行免登录,那么sessionId就和账号绑定，不能用方法三         * 如果用cookie或者token进行实现就可以进行免登录，         * 在本项目里，用cookie进行免登录，而且要统计session的数量所以用方法三         */        response.sendRedirect(request.getContextPath()+"/a/login");    }    //注册    @RequestMapping(value = "/a/enrollment",method = RequestMethod.POST)    public void enrollment(HttpServletRequest request, HttpServletResponse response, Model model)  throws ServletException, IOException {        String user = request.getParameter("username");        String pass = request.getParameter("password");        String requestUri = request.getRequestURI();        loggerController.info("remoteHost: " + requestUri);        Integer qq = new Integer(request.getParameter("qq"));//        loggerController.info("user-jsp: "+user +"\npass-jsp: "+ pass + "\nqq-jsp: "+ qq);        OutputStream out = response.getOutputStream();        //非法字符        try{            String errorMessage = request.getAttribute("errorMessage").toString();            if(errorMessage != null) {                String script = " <script charset=\"utf-8\" language='javaScript'> alert('" + errorMessage + "');</script>";                out.write(script.getBytes());                response.setHeader("refresh", "0;url=/a/login");                return;            }        }catch (Exception e){            e.printStackTrace();        }        try {            int userBeing = studyService.selectUserNumber(user);//            loggerController.info("用户名为: " + user + "有   " + userBeing);            if (userBeing == 0) {                Student study = new Student();                study.setUser(user);                Md5Utils md5 = new Md5Utils();                pass = md5.getMD5(pass);                study.setPass(pass);                study.setQq(qq);//                loggerController.info("注册的用户信息为： " + study);                int i = studyService.insertSelective(study);                loggerController.info("返回添加信息： " + i);                if (i == 1){                    Student student = studyService.selectUser(user);                    //生成session                    HttpSession session = request.getSession();                    session.setAttribute("user",user);//                        loggerController.info("sessionId: " + session.getId());                    //对用户id和登陆时间进行DES加密                    DesUtils desUtils = new DesUtils();                    String id = student.getId().toString();                    byte[] str1 = desUtils.desCrypto(id.getBytes(),DES_KEY);                    String createDate = String.valueOf(System.currentTimeMillis());                    byte[] str2 = desUtils.desCrypto(createDate.getBytes(),DES_KEY);                    //对加密后的id和登陆时间字符进行Base64编码                    String results = Base64.encodeBase64String(str1) + ":" + Base64.encodeBase64String(str2);                        /*设置cookie,  Cookie 里面放的是 用户的id 和 创建时间*/                    Cookie cookieToken = new Cookie("token",results);                    cookieToken.setMaxAge(60*5);//2分钟有效时间                    cookieToken.setPath("/");                    response.addCookie(cookieToken);                    if(request.getSession().getAttribute("lastUrl") != null)                    {                        //获取名为lastUrl的session的value                        String lastUrl = (String)request.getSession().getAttribute("lastUrl");                        loggerController.info("lastUrl: " + lastUrl);                        session.setAttribute("lastUrl",null);                        loggerController.info(request.getSession().getAttribute("lastUrl"));                        out.write("<script charset=\"utf-8\" language='javaScript'> alert('已成功注册');</script>".getBytes());                        //得到根路径后的url//                        loggerController.info("url: " + lastUrl.substring(remoteHost.length(),lastUrl.length()));                        response.setHeader("refresh", "0;url=" + lastUrl);                    }                    else{                        out.write("<script charset=\"utf-8\" language='javaScript'> alert('已成功注册');</script>".getBytes());                        response.setHeader("refresh", "0;url=/a/home");                    }                }                else {                    out.write(" <script charset=\"utf-8\" language='javaScript'> alert('注册失败');</script>".getBytes());                    response.setHeader("refresh", "0;url=/a/login");                }            }            else {                out.write(" <script charset=\"utf-8\" language='javaScript'> alert('该用户名已经存在');</script>".getBytes());                response.setHeader("refresh", "0;url=/a/login");            }        }catch (Exception e){            e.printStackTrace();            loggerController.error("e.getMessage() " + e.getMessage());        }    }}