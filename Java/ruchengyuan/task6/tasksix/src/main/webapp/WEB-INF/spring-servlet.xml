<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--此文件负责整个mvc中的配置-->
    <mvc:default-servlet-handler/>

    <!--启用spring的一些注解 -->
    <context:annotation-config/>

    <!-- 配置注解驱动 可以将request（请求）参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!-- 对com包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="jnshu.tasksix"/>

    <!--&lt;!&ndash;memcached 缓存配置 &ndash;&gt;-->
    <!--<import resource="classpath:conf/spring-mvc.xml" />-->
    <!--memcached 缓存配置 -->
    <import resource="classpath:conf/spring-memcached.xml" />
    <!--&lt;!&ndash;memcached 缓存配置 &ndash;&gt;-->
    <!--<import resource="classpath:conf/spring-mybatis.xml" />-->



    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <!--<mvc:default-servlet-handler/>-->
    <mvc:resources mapping="/css/**" location="/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/statics/image/"/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>

    <!-- tiles视图解释类 -->
    <!--<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">-->
        <!--<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; tiles配置路径 &ndash;&gt;-->
    <!--<context:property-placeholder order="3" location="/WEB-INF/tiles/test-tiles.xml"  ignore-unresolvable="false"/>-->
    <!--&lt;!&ndash;&lt;!&ndash;或（真） tiles配置路径 &ndash;&gt;&ndash;&gt;-->
    <!--<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">-->
    <!--<property name="definitions">-->
    <!--<list>-->
    <!--<value>/WEB-INF/tiles/test-tiles.xml</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->


    <!-- springmvc文件上传需要配置的节点-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>



    <mvc:interceptors>
        <!-- 直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <mvc:interceptor>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <mvc:mapping path="/a/u/**"/>
            <!--<mvc:mapping path="/a/login"/>-->
            <bean class="jnshu.tasksix.interceptor.LoginInterceptor">
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>




    <!-- tiles视图解释类 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass">
            <value>
                org.springframework.web.servlet.view.tiles3.TilesView
            </value>
        </property>
        <property name="order" value="1" />
    </bean>
    <!-- tiles配置路径 -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/test-tiles.xml</value>
            </list>
        </property>
    </bean>


    <!--=============AOP=========================AOP====================AOP=================AOP==========-->
    <bean id="LogAdvice" class="jnshu.tasksix.util.LogAdvice">
    </bean>
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <aop:config   >
        <aop:aspect id="myAspect" ref="LogAdvice">
            <!--确定执行什么类进行通知-->
            <aop:pointcut id="time" expression="execution(* jnshu.tasksix.service.*Service.*(..)) ||
                                                execution(* jnshu.tasksix.dao.*Mapper.*(..)) ||
                                                execution(* jnshu.tasksix.controller.*Controller.*(..))" />
            <aop:around method="around" pointcut-ref="time" />
        </aop:aspect>
    </aop:config>




</beans>